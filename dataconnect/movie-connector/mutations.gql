 # Copyright 2024 Google LLC
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #      http://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #

# Upsert (update or insert) a user based on their username
# TODO: Complete UpsertUser

# Add a movie to the user's favorites list
# TODO: Complete UpsertUser

# Remove a movie from the user's favorites list
# TODO: Complete DeleteFavoritedMovie

# Add a review for a movie
# TODO: Complete AddReview

# Delete a user's review for a movie
# TODO: Complete DeleteReview



# The mutations below are unused by the application, but are useful examples for more complex cases

# Create a movie based on user input
# mutation CreateMovie(
#   $title: String!
#   $releaseYear: Int!
#   $genre: String!
#   $rating: Float
#   $description: String
#   $imageUrl: String!
#   $tags: [String!] = []
# ) @auth(expr: "auth.token.isAdmin == true") {

# }
# Update movie information based on the provided ID
# mutation UpdateMovie(
#   $id: UUID!
#   $title: String
#   $releaseYear: Int
#   $genre: String
#   $rating: Float
#   $description: String
#   $imageUrl: String
#   $tags: [String!] = []
# ) @auth(level: USER_EMAIL_VERIFIED) {
#   movie_update(
#     id: $id
#     data: {
#       title: $title
#       releaseYear: $releaseYear
#       genre: $genre
#       rating: $rating
#       description: $description
#       imageUrl: $imageUrl
#       tags: $tags
#     }
#   )
# }

# Delete a movie by its ID
# mutation DeleteMovie($id: UUID!) @auth(level: USER_EMAIL_VERIFIED) {
#   movie_delete(id: $id)
# }

# Delete movies with a rating lower than the specified minimum rating
# mutation DeleteUnpopularMovies($minRating: Float!) @auth(level: USER_EMAIL_VERIFIED) {
#   movie_deleteMany(where: { rating: { le: $minRating } })
# }
# End of example mutations